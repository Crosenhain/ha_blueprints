---
# This automation simulates the use of the IKEA TRADFRI Remote control
# connected through Z2M.
# Borrowed from https://github.com/niro1987/homeassistant-config/blob/main/blueprints/automation/niro1987/zha_ikea_tradfri_5button_remote_white.yaml and adapted to use Zigbee2MQTT

# | Button   | Action               |
# | -------- | -------------------- |
# | Power    | Toggle the light     |
# | Dim-Up   | Increase brightness  |
# | Dim-Down | Decrease brightness  |
# | Right    | Increase temperature |
# | Left     | Decrease temperature |

blueprint:
  source_url: https://github.com/Crosenhain/ha_blueprints/blob/main/z2m_ikea_tradfri_5button_remote_white.yaml

  name: Z2M - IKEA TRADFRI - 5 Button Remote - Warm White Lights

  description: >-
    This automation simulates the use of the IKEA TRADFRI remote control
    connected through Z2M.

  domain: automation

  input:
    name: Required input ðŸ‘€
    icon: mdi:alert-box
    collapsed: false
    description: >
      This input is required for the blueprint to function
    input:
      remote:
        name: Remote
        description: >
          The entity to put here is the sensor that Z2M imported that is
          named like this>

          ```sensor.XXYour_HameXX_action```
        selector:
          entity:
            filter:
              - integration: mqtt
                domain: sensor
            multiple: false
    light:
      name: Light
      description: Select the light entity you wish to control.
      selector:
        entity:
          filter:
            - domain: light
    speed:
      name: Speed
      description: The speed in which to update the light when the button is held.
      selector:
        number:
          min: 100
          max: 1000
          step: 100
          unit_of_measurement: milliseconds
          mode: slider
      default: 500

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input remote
    
variables:
  var_light: !input light
  var_speed: !input speed
  event: >
    {# This covers an anomaly found while testing. #}
    {% if trigger.to_state.state | default('') %}
      {{ trigger.to_state.state }}
    {% else %}
      {{ trigger.to_state.attributes.action }}
    {% endif %}
  entity_id: !input remote
  friendly_name: '{{ trigger.to_state.attributes.friendly_name }}'

action:
  - choose:
      # Short-Press on the power button.
      - conditions:
          - condition: template
            value_template: '{{ event == "toggle" }}'
        sequence:
          - service: light.toggle
            target:
              entity_id: !input light

      # # Long-Press on the power button.
      # - conditions:
      #     - condition: template
      #       value_template: '{{ trigger.event.data.command == "move_to_level_with_on_off" }}'
      #   sequence:
      #     - service: light.turn_on
      #       target:
      #         entity_id: !input light
      #       data:
      #         brightness: 254
      #         color_temp: 400

      # # Short-Press on the dim-up button.
      # - conditions:
      #     - condition: template
      #       value_template: '{{ trigger.event.data.command == "step_with_on_off" }}'
      #   sequence:
      #     - service: light.turn_on
      #       target:
      #         entity_id: !input light
      #       data:
      #         brightness_step_pct: 20
      #         transition: "{{ (var_speed / 1000)|float }}"

      # # Long-Press on the dim-up button.
      # - conditions:
      #     - condition: template
      #       value_template: '{{ trigger.event.data.command == "move_with_on_off" }}'
      #   sequence:
      #     - repeat:
      #         while: []
      #         sequence:
      #           - service: light.turn_on
      #             target:
      #               entity_id: !input light
      #             data:
      #               brightness_step_pct: 10
      #               transition: "{{ (var_speed / 1000)|float }}"
      #           - delay:
      #               milliseconds: !input speed

      # # Short-Press on the dim-down button.
      # - conditions:
      #     - condition: template
      #       value_template: '{{ trigger.event.data.command == "step" }}'
      #   sequence:
      #     - service: light.turn_on
      #       target:
      #         entity_id: !input light
      #       data:
      #         brightness_step_pct: -20
      #         transition: "{{ (var_speed / 1000)|float }}"

      # # Long-Press on the dim-down button.
      # - conditions:
      #     - condition: template
      #       value_template: '{{ trigger.event.data.command == "move" }}'
      #   sequence:
      #     - repeat:
      #         while: []
      #         sequence:
      #           - service: light.turn_on
      #             target:
      #               entity_id: !input light
      #             data:
      #               brightness_step_pct: -10
      #               transition: "{{ (var_speed / 1000)|float }}"
      #           - delay:
      #               milliseconds: !input speed

      # # Short-Press on the color-up button.
      # - conditions:
      #     - condition: template
      #       value_template: '{{ trigger.event.data.command == "press" }}'
      #     - condition: template
      #       value_template: "{{ trigger.event.data.args == [256,13,0] }}"
      #   sequence:
      #     - service: light.turn_on
      #       target:
      #         entity_id: !input light
      #       data:
      #         color_temp: >-
      #           {% if state_attr(var_light, "color_temp") - 18 < 153 %}
      #             {{ 153 }}
      #           {% else %}
      #             {{ state_attr(var_light, "color_temp") - 18 }}
      #           {% endif %}
      #         transition: "{{ (var_speed / 1000)|float }}"

      # # Long-Press on the color-up button.
      # - conditions:
      #     - condition: template
      #       value_template: '{{ trigger.event.data.command == "hold" }}'
      #     - condition: template
      #       value_template: "{{ trigger.event.data.args == [3328,0] }}"
      #   sequence:
      #     - repeat:
      #         while: []
      #         sequence:
      #           - service: light.turn_on
      #             target:
      #               entity_id: !input light
      #             data:
      #               color_temp: >-
      #                 {% if state_attr(var_light, "color_temp") - 18 < 153 %}
      #                   {{ 153 }}
      #                 {% else %}
      #                   {{ state_attr(var_light, "color_temp") - 18 }}
      #                 {% endif %}
      #               transition: "{{ (var_speed / 1000)|float }}"
      #           - delay:
      #               milliseconds: !input speed

      # # Short-Press on the color-down button.
      # - conditions:
      #     - condition: template
      #       value_template: '{{ trigger.event.data.command == "press" }}'
      #     - condition: template
      #       value_template: "{{ trigger.event.data.args == [257,13,0] }}"
      #   sequence:
      #     - service: light.turn_on
      #       target:
      #         entity_id: !input light
      #       data:
      #         color_temp: >-
      #           {% if state_attr(var_light, "color_temp") + 18 > 500 %}
      #             {{ 500 }}
      #           {% else %}
      #             {{ state_attr(var_light, "color_temp") + 18 }}
      #           {% endif %}
      #         transition: "{{ (var_speed / 1000)|float }}"

      # # Long-Press on the color-down button.
      # - conditions:
      #     - condition: template
      #       value_template: '{{ trigger.event.data.command == "hold" }}'
      #     - condition: template
      #       value_template: "{{ trigger.event.data.args == [3329,0] }}"
      #   sequence:
      #     - repeat:
      #         while: []
      #         sequence:
      #           - service: light.turn_on
      #             target:
      #               entity_id: !input light
      #             data:
      #               color_temp: >-
      #                 {% if state_attr(var_light, "color_temp") + 18 > 500 %}
      #                   {{ 500 }}
      #                 {% else %}
      #                   {{ state_attr(var_light, "color_temp") + 18 }}
      #                 {% endif %}
      #               transition: "{{ (var_speed / 1000)|float }}"
      #           - delay:
      #               milliseconds: !input speed

    # Any other event will cancel the repeat loops.
    default: []
